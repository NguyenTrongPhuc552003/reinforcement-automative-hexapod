/'
 * Hexapod Project - A Reinforcement Learning-based Autonomous Hexapod
 * Copyright (C) 2025  Nguyen Trong Phuc
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 '/

@startuml component
!theme plain

title <font size=20><b>Hexapod Robot - Component Architecture</b></font>
left header Version 1.0 - Reinforcement Learning Autonomous Hexapod
right header BeagleBone Black Platform

skinparam {
    componentStyle rectangle
    backgroundColor White
}

skinparam component {
    BackgroundColor<<Application>> LightBlue
    BackgroundColor<<Control>> LightGreen
    BackgroundColor<<Hardware>> Orange
    BackgroundColor<<AI>> Yellow
    BackgroundColor<<External>> LightGray
}

skinparam package {
    BackgroundColor<<UserSpace>> AliceBlue
    BackgroundColor<<KernelSpace>> LightYellow
    BackgroundColor<<Hardware>> MistyRose
}

package "User Space Applications" <<UserSpace>> {
    
    package "Application Layer" {
        component [Application Controller] <<Application>> as AppCtrl
        component [Hexapod User Interface] <<Application>> as UI
        component [Calibration Manager] <<Application>> as CalMgr
    }
    
    package "Motion Control Layer" {
        component [Gait Generator] <<Control>> as GaitGen
        component [Kinematics Engine] <<Control>> as KinematicsEng
        component [Balance System] <<Control>> as BalSys
        component [Controller] <<Control>> as Ctrl
    }
    
    package "Hardware Interface Layer" {
        component [Hexapod Hardware Interface] <<Hardware>> as HexHW
        component [Ultrasonic Sensor] <<Hardware>> as USSensor
        component [Common Utilities] <<Application>> as CommonUtil
    }
    
    package "Python TD3 AI System" {
        package "pytd3" {
            component [TD3 Agent] <<AI>> as TD3Agent
            component [Environment Interface] <<AI>> as EnvInterface
            component [Neural Networks] <<AI>> as NeuralNets
            component [TD3 Bridge] <<AI>> as TD3Bridge
        }
    }
}

package "Kernel Space" <<KernelSpace>> {
    component [Hexapod Kernel Driver] <<Hardware>> as KernelDriver
    component [I2C Subsystem] <<Hardware>> as I2C
    component [GPIO Subsystem] <<Hardware>> as GPIO
}

package "Physical Hardware" <<Hardware>> {
    component [BeagleBone Black] <<Hardware>> as BBB
    component [PCA9685 PWM Controller] <<Hardware>> as PCA9685
    component [MPU6050 IMU] <<Hardware>> as MPU6050
    component [ADXL345 Accelerometer] <<Hardware>> as ADXL345
    component [HC-SR04 Ultrasonic] <<Hardware>> as HCSR04
    component [18x MG996R Servo Motors] <<Hardware>> as Servos
}

package "External Systems" <<External>> {
    component [Docker Environment] <<External>> as Docker
    component [Build System] <<External>> as BuildSys
    component [Package Manager] <<External>> as PkgMgr
}

' Application Layer Connections
AppCtrl --> UI : "user commands"
AppCtrl --> Ctrl : "robot control"
AppCtrl --> CalMgr : "calibration data"

' Control Layer Connections
Ctrl --> GaitGen : "gait parameters"
Ctrl --> BalSys : "balance control"
Ctrl --> HexHW : "hardware commands"
GaitGen --> KinematicsEng : "position calculations"
KinematicsEng --> HexHW : "joint angles"
BalSys --> HexHW : "tilt corrections"

' Hardware Interface Connections
HexHW --> KernelDriver : "/dev/hexapod\nIOCTL calls"
USSensor --> GPIO : "GPIO control"
Ctrl --> USSensor : "distance sensing"

' AI System Connections
TD3Agent --> EnvInterface : "state/action"
TD3Agent --> NeuralNets : "policy/value"
TD3Bridge --> HexHW : "AI commands"
EnvInterface --> TD3Bridge : "environment state"

' Kernel Connections
KernelDriver --> I2C : "I2C transactions"
KernelDriver --> GPIO : "GPIO operations"
I2C --> PCA9685 : "PWM commands"
I2C --> MPU6050 : "IMU data"
I2C --> ADXL345 : "accelerometer data"
GPIO --> HCSR04 : "trigger/echo"

' Hardware Connections
PCA9685 --> Servos : "PWM signals\n(18 channels)"
MPU6050 --> BBB : "I2C bus"
ADXL345 --> BBB : "I2C bus"
HCSR04 --> BBB : "GPIO pins"
Servos --> BBB : "power distribution"

' External System Connections
Docker --> AppCtrl : "containerized\napplication"
BuildSys --> AppCtrl : "cross-compilation\nBeagleBone target"
PkgMgr --> KernelDriver : "deployment\npackaging"

' Common Utilities Connections
CommonUtil --> AppCtrl : "terminal mgmt,\nperformance monitoring"
CommonUtil --> Ctrl : "error reporting,\nvalidation"

' Notes for key components
note right of KernelDriver
  - Device file: /dev/hexapod
  - IOCTL commands for servo control
  - IMU data acquisition
  - Sensor type switching
  - Calibration management
end note

note right of TD3Agent
  - Deep Reinforcement Learning
  - Twin Delayed DDPG
  - Continuous action space
  - Policy gradient methods
end note

note bottom of PCA9685
  16-channel PWM driver
  Controls 18 servo motors
  (6 legs × 3 joints each)
end note

note bottom of BBB
  ARM Cortex-A8 processor
  Linux-based embedded system
  I2C, GPIO, and PWM interfaces
end note

legend right
  <b>Hexapod Robot - Component Legend</b>
  --
  <b>Hardware Components:</b>
  • BeagleBone Black
  • PCA9685 PWM Controllers
  • MPU6050 IMU Sensor
  • ADXL345 Accelerometer
  • Ultrasonic Sensor
  • Servo Motors

  <b>Software Components:</b>
  • Linux Kernel
  • Device Drivers
  • User Space Applications
  • Python TD3 (Optional)

  <b>Communication Protocols:</b>
  • I2C
  • PWM
  • GPIO
end legend

@enduml