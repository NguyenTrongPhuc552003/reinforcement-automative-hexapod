/'
 * Hexapod Project - A Reinforcement Learning-based Autonomous Hexapod
 * Copyright (C) 2025  Nguyen Trong Phuc
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 '/

@startuml state
!theme plain

title <font size=20><b>Hexapod Robot - System States with CPG Integration</b></font>
left header Version 1.0 - Reinforcement Learning Autonomous Hexapod
right header BeagleBone AI Platform

skinparam {
    stateBackgroundColor #E2F0FF
    stateBorderColor #3C7FC0
    stateArrowColor #3C7FC0
    stateFontStyle bold
    
    stateAttributeFontColor #1A4473
    stateAttributeFontStyle italic
    
    legendBackgroundColor #FAFAFA
    legendBorderColor #D0D0D0
    
    stateStartColor #28A745
    stateEndColor #DC3545
    
    noteBorderColor #FFB266
    noteBackgroundColor #FFEED9
    noteFontColor #663500
}

' Overall hardware system state
state "Hardware System" as SystemState {

    ' PWM Controller states
    state "PWM Controllers (PCA9685)" as PWMState {
        state "Hardware Reset" as PWM_RESET
        state "Sleep Mode" as PWM_SLEEP
        state "Active Mode" as PWM_ACTIVE
        state "All Outputs On" as PWM_ALL_ON
        state "All Outputs Off" as PWM_ALL_OFF
        
        ' Transitions
        [*] --> PWM_RESET : pca9685_init() [resets both controllers]
        PWM_RESET --> PWM_SLEEP : Reset complete [MODE1 | SLEEP bit = 1]
        PWM_SLEEP --> PWM_SLEEP : Set frequency [update prescale register]
        PWM_SLEEP --> PWM_ACTIVE : Enable auto-increment [MODE1 | AI bit = 1]
        PWM_ACTIVE --> PWM_ALL_OFF : Disable outputs
        PWM_ACTIVE --> PWM_ALL_ON : Enable outputs
        PWM_ALL_OFF --> PWM_ACTIVE : Resume normal operation
        PWM_ALL_ON --> PWM_ACTIVE : Resume normal operation
        PWM_ACTIVE --> PWM_SLEEP : Prepare for shutdown
    }
    
    ' IMU Sensor states
    state "IMU Sensor (MPU6050)" as IMUState {
        state "Power Down" as IMU_OFF
        state "Power Reset" as IMU_RESET
        state "Sleep Mode" as IMU_SLEEP
        state "Active Mode" as IMU_ACTIVE
        
        ' Transitions
        [*] --> IMU_OFF : Before initialization
        IMU_OFF --> IMU_RESET : mpu6050_init() [reset bit = 1]
        IMU_RESET --> IMU_SLEEP : Reset complete [delay 100ms]
        IMU_SLEEP --> IMU_ACTIVE : Wake up [PWR_MGMT_1 = CLOCK_PLL]
        IMU_ACTIVE --> IMU_SLEEP : Enter sleep [PWR_MGMT_1 | SLEEP_BIT]
        IMU_ACTIVE --> IMU_ACTIVE : Read sensors [read registers 0x3B-0x48]
    }
    
    ' Servo Motors states
    state "Servo Motors (18x)" as ServoState {
        state "Unpowered" as SERVO_OFF
        state "Centered Position" as SERVO_CENTER
        state "Active Movement" as SERVO_ACTIVE
        state "Calibrated Position" as SERVO_CALIBRATED
        
        ' Transitions
        [*] --> SERVO_OFF : Before initialization
        SERVO_OFF --> SERVO_CENTER : servo_init() [center all servos]
        SERVO_CENTER --> SERVO_ACTIVE : servo_set_angle() [move to position]
        SERVO_ACTIVE --> SERVO_CALIBRATED : servo_set_calibration() [apply offsets]
        SERVO_CALIBRATED --> SERVO_ACTIVE : Continuous movement
        SERVO_ACTIVE --> SERVO_CENTER : servo_center_all() [safety position]
    }
    
    ' Detailed notes for hardware states
    note bottom of PWMState
      50Hz PWM frequency for servo control
      Each controller: 16 channels, 12-bit resolution
      Primary controller (0x40): legs 0,1,2
      Secondary controller (0x41): legs 3,4,5
    end note
    
    note bottom of IMUState
      MPU6050 at I2C address 0x68
      Sample rate: 200Hz (1kHz/(1+4))
      Digital low-pass filter: 10Hz cutoff
      16-bit ADC for all measurements
    end note
    
    note bottom of ServoState
      Pulse width: 1000μs - 2000μs
      1500μs = neutral (0°)
      ±500μs = ±90° range
      
      Per-leg calibration offsets stored
      in non-volatile memory
    end note
}

' CPG System States
state "CPG (Central Pattern Generator)" as CPGState {
    state "Uninitialized" as CPG_UNINIT
    state "Network Setup" as CPG_SETUP
    state "Oscillator Sync" as CPG_SYNC
    state "Active Locomotion" as CPG_ACTIVE
    state "Autonomous Mode" as CPG_AUTONOMOUS
    state "Gait Transition" as CPG_TRANSITION
    state "Balance Adjustment" as CPG_BALANCE
    
    ' CPG Transitions
    [*] --> CPG_UNINIT
    CPG_UNINIT --> CPG_SETUP : cpg::Controller::initialize()
    CPG_SETUP --> CPG_SYNC : Network created with 6 oscillators
    CPG_SYNC --> CPG_ACTIVE : Oscillators synchronized
    CPG_ACTIVE --> CPG_AUTONOMOUS : Enable autonomous navigation
    CPG_AUTONOMOUS --> CPG_BALANCE : IMU feedback received
    CPG_BALANCE --> CPG_AUTONOMOUS : Balance adjustments applied
    CPG_ACTIVE --> CPG_TRANSITION : Gait change requested
    CPG_TRANSITION --> CPG_ACTIVE : New gait established
    CPG_AUTONOMOUS --> CPG_ACTIVE : Manual override
    CPG_ACTIVE --> CPG_SYNC : Reset network
}

note bottom of CPGState
  Hopf Oscillator Network:
  • 6 coupled oscillators (one per leg)
  • Phase relationships for gait coordination
  • Real-time balance feedback integration
  • Autonomous obstacle avoidance
  
  Supported Gaits:
  • Tripod (fast, alternating triangles)
  • Wave (slow, sequential leg movement)
  • Ripple (medium, ripple-like progression)
end note

' Ultrasonic Sensor States
state "Ultrasonic Sensor (HC-SR04)" as UltrasonicState {
    state "Idle" as US_IDLE
    state "Trigger Pulse" as US_TRIGGER
    state "Wait Echo" as US_WAIT
    state "Measure Distance" as US_MEASURE
    state "Process Data" as US_PROCESS
    
    ' Ultrasonic transitions
    [*] --> US_IDLE
    US_IDLE --> US_TRIGGER : Measurement request
    US_TRIGGER --> US_WAIT : 10μs trigger pulse sent
    US_WAIT --> US_MEASURE : Echo pulse received
    US_MEASURE --> US_PROCESS : Calculate distance
    US_PROCESS --> US_IDLE : Data ready
    US_WAIT --> US_IDLE : Timeout (no echo)
}

' I2C Bus states
state "I2C Bus" as I2CBus {
    state "Idle" as I2C_IDLE
    state "Write Transmission" as I2C_WRITE
    state "Read Transmission" as I2C_READ
    state "Error Recovery" as I2C_ERROR
    
    ' Transitions
    [*] --> I2C_IDLE
    I2C_IDLE --> I2C_WRITE : pca9685_write_reg()
    I2C_IDLE --> I2C_READ : mpu6050_read_block()
    I2C_WRITE --> I2C_IDLE : transmission complete
    I2C_READ --> I2C_IDLE : data received
    I2C_WRITE --> I2C_ERROR : I/O error
    I2C_READ --> I2C_ERROR : I/O error
    I2C_ERROR --> I2C_IDLE : reset/retry
}

' Global transitions between major components
PWMState -[#336600,dashed]-> ServoState : PWM signals
IMUState -[#0066CC,dashed]-> CPGState : Orientation feedback
CPGState -[#FF6600,dashed]-> ServoState : CPG-generated positions
UltrasonicState -[#9933CC,dashed]-> CPGState : Obstacle data
SystemState -[#993399,dashed]-> ServoState : Legacy position commands

' Main system states
state "Application Control States" as MainSystemState {
    state "Uninitialized" as SYS_UNINIT
    state "Initialization" as SYS_INIT
    state "Ready" as SYS_READY
    state "Manual Control" as SYS_MANUAL
    state "Autonomous Mode" as SYS_AUTONOMOUS
    state "Calibration Mode" as SYS_CALIBRATION
    state "Error" as SYS_ERROR
    state "Shutdown" as SYS_SHUTDOWN
    
    ' Main system transitions
    [*] --> SYS_UNINIT
    SYS_UNINIT --> SYS_INIT : hexapod_init()
    SYS_INIT --> SYS_READY : all subsystems initialized
    SYS_READY --> SYS_MANUAL : Manual mode selected
    SYS_READY --> SYS_AUTONOMOUS : Autonomous mode selected
    SYS_READY --> SYS_CALIBRATION : Calibration mode selected
    SYS_MANUAL --> SYS_AUTONOMOUS : Switch to autonomous
    SYS_AUTONOMOUS --> SYS_MANUAL : Manual override
    SYS_MANUAL --> SYS_ERROR : hardware error detected
    SYS_AUTONOMOUS --> SYS_ERROR : hardware error detected
    SYS_ERROR --> SYS_READY : error recovery
    SYS_MANUAL --> SYS_READY : operation complete
    SYS_AUTONOMOUS --> SYS_READY : operation complete
    SYS_CALIBRATION --> SYS_READY : calibration complete
    SYS_READY --> SYS_SHUTDOWN : hexapod_cleanup()
    SYS_SHUTDOWN --> [*]
}

' Comprehensive legend with hardware info
legend right
  <b>Hexapod System State Diagram with CPG Integration</b>
  --
  <b>Hardware Components:</b>
  • 2× PCA9685 PWM Controllers (I2C addresses 0x40, 0x41)
  • 1× MPU6050 IMU Sensor (I2C address 0x68)
  • 1× HC-SR04 Ultrasonic Sensor (autonomous navigation)
  • 18× Servo Motors (3 per leg × 6 legs)
  
  <b>CPG System:</b>
  • 6 Hopf oscillators with biological coordination
  • Real-time balance feedback and obstacle avoidance
  • Support for tripod, wave, and ripple gaits
  
  <b>I2C Communication:</b>
  • Bus 3 on BeagleBone AI (SCL: P9_19, SDA: P9_20)
  • 100kHz I2C clock frequency
  
  <b>Signal Legend:</b>
  ——> : State transition
  - - -> : Data/signal flow
endlegend

@enduml