@startuml Hexapod Operation Sequence with Enhanced Hardware Visibility

' Custom styling for better readability
!theme plain
skinparam {
    SequenceArrowThickness 1.5
    SequenceGroupBodyBackgroundColor #F5F5F5
    SequenceGroupBorderColor #888888
    SequenceLifeLineBorderColor #666666
    SequenceLifeLineBackgroundColor #FEFEFE
    ParticipantBorderColor #666666
    ParticipantBackgroundColor #FEFECE
    ActorBorderColor #666666
    ActorBackgroundColor #FEFECE
    defaultFontName Arial
    NoteBorderColor #888888
    NoteBackgroundColor #FFFFDD
    SequenceGroupFontStyle bold
    SequenceGroupFontSize 14
    SequenceBoxBackgroundColor #E0EFEF
}

' Participants with more meaningful names and grouping
actor "User" as User
box "Software Layer" #EEEEFF
    participant "Application" as App
    participant "Controller" as Controller
    participant "Gait Generator" as Gait
    participant "Kinematics Engine" as Kinematics
    participant "Hardware Interface" as Hexapod
endbox

box "Hardware Layer" #FFE8E8
    participant "Kernel Driver" as Driver
    participant "Physical Hardware" as Hardware
endbox

' Title with better description
title Hexapod Robot System - Operation Sequence with Hardware Focus

' Startup sequence with clearer hardware interactions
group "System Initialization"
    User -> App: launch application
    activate App
    
    App -> Hexapod: initialize hardware interface
    activate Hexapod
    
    note right of Hexapod: Hardware interface opens communication\nwith the kernel driver
    Hexapod -> Driver: open device ("/dev/hexapod")
    activate Driver
    
    Driver -> Hardware: initialize hardware components
    activate Hardware
    note right of Hardware: Powers up servos and sensors
    note right of Hardware: Sets PWM controllers to 50Hz
    note right of Hardware: Configures I2C communication
    Hardware --> Driver: initialization complete
    deactivate Hardware
    
    Driver --> Hexapod: file descriptor for I/O operations
    deactivate Driver
    
    Hexapod --> App: hardware interface ready
    deactivate Hexapod
    
    App -> Controller: initialize motion controller
    activate Controller
    Controller -> Gait: initialize gait patterns
    activate Gait
    Gait --> Controller: gait patterns ready
    deactivate Gait
    Controller --> App: controller ready
    deactivate Controller
    
    ' Center legs at startup - important hardware interaction
    App -> Hexapod: position legs in centered pose
    activate Hexapod
    Hexapod -> Driver: ioctl(HEXAPOD_IOCTL_CENTER_ALL)
    activate Driver
    
    note right of Driver: Driver processes center-all command\nand translates to hardware signals
    
    Driver -> Hardware: send PWM signals to center all servos
    activate Hardware
    note right of Hardware: All 18 servos receive 1.5ms pulses\n(neutral position at 0 degrees)
    Hardware --> Driver: servos positioned
    deactivate Hardware
    
    Driver --> Hexapod: operation complete
    deactivate Driver
    
    Hexapod --> App: legs centered
    deactivate Hexapod
    
    App --> User: system ready for operation
end

' Main operation loop with enhanced hardware details
group "Operation Cycle"
    loop while system is running
        User -> App: input command (key press)
        activate App
        
        App -> Controller: update(input, deltaTime)
        activate Controller
        
        alt Walking Mode
            Controller -> Gait: update(direction, speed)
            activate Gait
            
            loop for each leg (6 legs)
                Gait -> Gait: calculate leg trajectory
                Gait -> Kinematics: calculate joint angles
                activate Kinematics
                Kinematics --> Gait: joint angles for leg
                deactivate Kinematics
                
                ' Hardware interaction for leg movement
                Gait -> Hexapod: setLegPosition(leg, angles)
                activate Hexapod
                
                Hexapod -> Driver: ioctl(HEXAPOD_IOCTL_SET_LEG, leg_cmd)
                activate Driver
                note right of Driver: Driver converts angular positions\nto PWM timing values
                
                Driver -> Hardware: set PWM signals for leg servos
                activate Hardware
                note right of Hardware: Three servo signals updated per leg:\n- Hip servo: horizontal movement\n- Knee servo: vertical bend\n- Ankle servo: foot angle
                Hardware --> Driver: PWM signals updated
                deactivate Hardware
                
                Driver --> Hexapod: leg position updated
                deactivate Driver
                Hexapod --> Gait: position set
                deactivate Hexapod
            end
            
            Gait --> Controller: gait cycle updated
            deactivate Gait
            
        else Balance Mode
            ' IMU sensor reading - important hardware interaction
            Controller -> Hexapod: read orientation sensors
            activate Hexapod
            
            Hexapod -> Driver: ioctl(HEXAPOD_IOCTL_GET_IMU)
            activate Driver
            
            note right of Driver: Driver reads data from MPU6050 IMU sensor\nvia I2C bus (address 0x68)
            
            Driver -> Hardware: read acceleration and gyroscope data
            activate Hardware
            note right of Hardware: I2C read registers 0x3B-0x48:\n- 3 acceleration axes (X,Y,Z)\n- 3 rotation rate axes (X,Y,Z)
            Hardware --> Driver: raw sensor values
            deactivate Hardware
            
            Driver --> Hexapod: IMU data structure
            deactivate Driver
            
            Hexapod --> Controller: orientation data
            deactivate Hexapod
            
            Controller -> Controller: calculate tilt compensation
            
            ' Apply balance adjustments to legs
            loop for each leg
                Controller -> Kinematics: calculate compensated joint angles
                activate Kinematics
                Kinematics --> Controller: adjusted angles
                deactivate Kinematics
                
                Controller -> Hexapod: setLegPosition with balance adjustment
                activate Hexapod
                
                Hexapod -> Driver: ioctl(HEXAPOD_IOCTL_SET_LEG)
                activate Driver
                Driver -> Hardware: update servo positions
                activate Hardware
                Hardware --> Driver: servo positions updated
                deactivate Hardware
                Driver --> Hexapod: leg adjusted
                deactivate Driver
                
                Hexapod --> Controller: adjustment applied
                deactivate Hexapod
            end
        end
        
        Controller --> App: control cycle complete
        deactivate Controller
        
        App -> App: update telemetry display
        
        ' Maintain timing with sleep
        App -> App: sleep to maintain target frame rate
        
        App --> User: updated robot state
        deactivate App
    end
end

' Shutdown sequence with hardware details
group "System Shutdown"
    User -> App: terminate application (quit command)
    activate App
    
    ' Safe shutdown - center legs
    App -> Hexapod: center all legs for safe shutdown
    activate Hexapod
    
    Hexapod -> Driver: ioctl(HEXAPOD_IOCTL_CENTER_ALL)
    activate Driver
    
    note right of Driver: Driver prepares for safe shutdown\nby positioning all legs in neutral stance
    
    Driver -> Hardware: set all servos to center position
    activate Hardware
    note right of Hardware: All servos return to 1.5ms pulse width\n(neutral position)
    Hardware --> Driver: servos centered
    deactivate Hardware
    
    Driver --> Hexapod: centering complete
    deactivate Driver
    
    Hexapod --> App: robot in safe position
    deactivate Hexapod
    
    ' Release hardware resources
    App -> Hexapod: release hardware resources
    activate Hexapod
    
    Hexapod -> Driver: close(fd)
    activate Driver
    note right of Driver: Driver performs cleanup:\n- Disables PWM outputs\n- Puts IMU in sleep mode\n- Releases I2C bus
    Driver --> Hexapod: resources released
    deactivate Driver
    
    Hexapod --> App: cleanup complete
    deactivate Hexapod
    
    App -> App: exit(0)
    App --> User: application terminated
    deactivate App
end

' Footer
legend right
  <b>Hexapod Robot System Operation</b>
  --
  Hardware Layer Details:
  • 18 Servos (3 per leg) via PCA9685 PWM controllers
  • MPU6050 IMU for orientation sensing
  • I2C bus communication (address 0x40, 0x41, 0x68)
  • 50Hz PWM signal for servo control (1-2ms pulse width)
endlegend

@enduml