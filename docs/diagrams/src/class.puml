/'
 * Hexapod Project - A Reinforcement Learning-based Autonomous Hexapod
 * Copyright (C) 2025  Nguyen Trong Phuc
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 '/

@startuml class

' Style and theme settings - enhanced for readability
!theme plain
skinparam {
    classAttributeIconSize 0
    classBackgroundColor #FEFECE
    classBorderColor #A80036
    packageBackgroundColor #FEFECE
    packageBorderColor #A80036
    ArrowColor #A80036
    defaultFontName Arial
    shadowing false
    
    ' Enhanced visual cues for hardware components
    packageBackgroundColor<<hardware>> #E8F8E8
    packageBorderColor<<hardware>> #2E8B57
    classBackgroundColor<<device>> #E0FFFF
    classBorderColor<<device>> #4682B4
    classBackgroundColor<<sensor>> #FFE6CC
    classBorderColor<<sensor>> #D2691E
    classBackgroundColor<<actuator>> #E6CCFF
    classBorderColor<<actuator>> #9370DB
    
    NoteBackgroundColor #FFFFCC
    NoteBorderColor #999999
}

' Title with improved description
title Hexapod Robot Control System - Class Architecture with Hardware Focus

' =============================================================================
' HARDWARE LAYER
' =============================================================================
package "Hardware Layer" <<hardware>> {
    ' Hardware interfaces
    class "Hexapod" as HexapodHW <<device>> {
        ' Core hardware interface methods
        +init(): bool
        +cleanup(): void
        +setLegPosition(leg_num: uint8_t, position: LegPosition): bool
        +getLegPosition(leg_num: uint8_t, position: LegPosition&): bool
        +centerAll(): bool
        +getImuData(data: ImuData&): bool
        +setCalibration(leg_num: uint8_t, hip_offset: int16_t, knee_offset: int16_t, ankle_offset: int16_t): bool
        
        ' Error handling
        +getLastError(): ErrorInfo
        +getLastErrorMessage(): string
        +getLastErrorCode(): int
        +getLastErrorCategory(): ErrorCategory
    }
    
    ' Implementation details (hidden via PIMPL)
    class HexapodImpl << (P,#FF7700) PIMPL >> {
        -fd: int  ' Device file descriptor
        -initialized: bool
        -positions: LegPosition[NUM_LEGS]
        -executeIoctl(request: unsigned long, arg: void*, errorMessage: const char*): bool
    }
    
    ' Physical components represented as classes
    class "ServoMotor" as Servo <<actuator>> {
        -channel: uint8_t
        -minPulse: uint16_t
        -maxPulse: uint16_t
        -centerPulse: uint16_t
        
        +setAngle(degrees: int16_t): void
        +getAngle(): int16_t
        +center(): void
    }
    
    class "IMU (MPU6050)" as IMU <<sensor>> {
        -i2cAddress: uint8_t
        -sampleRate: uint16_t
        
        +readAcceleration(): Vector3D
        +readGyroscope(): Vector3D
        +calibrate(): bool
    }
    
    class "PWM Controller (PCA9685)" as PWMController <<device>> {
        -i2cAddress: uint8_t
        -frequency: uint16_t
        
        +setPWM(channel: uint8_t, on: uint16_t, off: uint16_t): bool
        +setPWMFrequency(freq_hz: uint16_t): bool
        +sleep(): void
        +wakeup(): void
    }
    
    ' Hardware data structures
    class LegPosition {
        +leg_num: uint8_t
        +joints: JointAngles
        
        ' Methods for accessing joint angles
        +getHip(): int16_t
        +getKnee(): int16_t
        +getAnkle(): int16_t
        +setHip(value: int16_t): void
        +setKnee(value: int16_t): void
        +setAnkle(value: int16_t): void
    }
    
    class ImuData <<sensor>> {
        +accel_x: int16_t
        +accel_y: int16_t
        +accel_z: int16_t
        +gyro_x: int16_t
        +gyro_y: int16_t
        +gyro_z: int16_t
        
        ' Conversion methods for raw values
        +getAccelX(): float  ' Returns in g units
        +getAccelY(): float  ' Returns in g units
        +getAccelZ(): float  ' Returns in g units
        +getGyroX(): float   ' Returns in degrees/second
        +getGyroY(): float   ' Returns in degrees/second
        +getGyroZ(): float   ' Returns in degrees/second
    }
    
    ' Hardware constants and configuration
    class "Hardware Constants" as HWConstants <<device>> {
        +{static} I2C_BUS: int = 3
        +{static} PWM_FREQ_HZ: int = 50
        +{static} PWM_RESOLUTION: int = 4096
        +{static} PWM_MIN_US: int = 1000   ' 1ms pulse
        +{static} PWM_MAX_US: int = 2000   ' 2ms pulse
        +{static} PWM_CENTER_US: int = 1500 ' 1.5ms pulse
    }
    
    ' Physical dimensions and limits
    struct Config {
        +{static} NUM_LEGS: int = 6
        +{static} SERVOS_PER_LEG: int = 3
        +{static} TOTAL_SERVOS: int = 18
    }
    
    struct Dimensions {
        +{static} COXA_LENGTH: int = 30    ' Hip joint length (mm)
        +{static} FEMUR_LENGTH: int = 85   ' Thigh segment length (mm)
        +{static} TIBIA_LENGTH: int = 130  ' Lower leg length (mm)
    }
    
    struct AngleLimits {
        +{static} HIP_MIN: int = -90   ' Minimum hip angle (degrees)
        +{static} HIP_MAX: int = 90    ' Maximum hip angle (degrees)
        +{static} KNEE_MIN: int = -90  ' Minimum knee angle (degrees)
        +{static} KNEE_MAX: int = 90   ' Maximum knee angle (degrees)
        +{static} ANKLE_MIN: int = -90 ' Minimum ankle angle (degrees)
        +{static} ANKLE_MAX: int = 90  ' Maximum ankle angle (degrees)
    }
    
    ' Error handling for hardware
    enum ErrorCategory {
        NONE
        DEVICE         ' Hardware device errors
        COMMUNICATION  ' I2C/bus communication errors
        PARAMETER      ' Invalid parameter errors
        SYSTEM         ' OS/system errors
        HARDWARE       ' Physical hardware errors
    }
    
    class ErrorInfo {
        -code: int
        -category: ErrorCategory
        -message: string
        
        +getCode(): int
        +getCategory(): ErrorCategory
        +getMessage(): string
        +hasError(): bool
    }
    
    ' Hardware relationships
    HexapodHW *-- HexapodImpl : implementation
    HexapodHW "1" *-- "18" Servo : controls
    HexapodHW "1" *-- "1" IMU : reads from
    HexapodHW "1" *-- "2" PWMController : communicates with
    
    Servo "9" --* "1" PWMController : connected to
    LegPosition -- JointAngles : contains
    HexapodImpl -- ErrorInfo : uses
}

' =============================================================================
' MOTION CONTROL LAYER (simplified)
' =============================================================================
package "Motion Control" {
    class Gait {
        +init(hexapod: HexapodHW&, params: GaitParameters): bool
        +update(time: double, direction: double, speed: double): bool
        +centerLegs(): bool
    }
    
    class Kinematics {
        +forwardKinematics(angles: LegPosition, position: Point3D&): bool
        +inverseKinematics(position: Point3D, angles: LegPosition&): bool
    }
}

' =============================================================================
' USER CONTROL LAYER (simplified)
' =============================================================================
package "User Control" {
    class Controller {
        +init(): bool
        +processKey(key: char): bool
        +update(): bool
    }
    
    class Application {
        +init(): bool
        +run(): ExecutionResult
        +shutdown(): void
    }
}

' External connections between layers
Controller --> HexapodHW : controls
Controller --> Gait : uses
Gait --> HexapodHW : positions legs
Kinematics --> LegPosition : calculates
Application --> Controller : manages

' Notes explaining hardware components
note right of PWMController
  <b>PCA9685 PWM Controllers:</b>
  - Primary controller (0x40): legs 0, 1, 2
  - Secondary controller (0x41): legs 3, 4, 5
  - 16 channels per controller
  - 12-bit resolution (4096 steps)
  - 50Hz frequency (20ms period)
end note

note right of IMU
  <b>MPU6050 IMU Sensor:</b>
  - I2C address: 0x68
  - 3-axis accelerometer
  - 3-axis gyroscope
  - 16-bit ADC resolution
  - Configurable sample rate
end note

note right of Servo
  <b>Servo Motors:</b>
  - 18 total servos (3 per leg × 6 legs)
  - Hip, knee, and ankle joints
  - PWM controlled (1000-2000μs pulse)
  - 1500μs = center position (0°)
  - ±90° range of motion
end note

' Comprehensive legend for hardware components
legend right
  <b>Hexapod Hardware Architecture</b>
  --
  <b>Color Legend:</b>
  <back:#E0FFFF>■</back> Control Devices
  <back:#FFE6CC>■</back> Sensors
  <back:#E6CCFF>■</back> Actuators
  <back:#FF7700>■</back> Implementation Classes (PIMPL)
  
  <b>Hardware Bus:</b>
  I2C Bus 3 on BeagleBone AI
  SCL: P9_19, SDA: P9_20, 100kHz
  
  <b>Physical Organization:</b>
  - 6 legs with 3 servos each
  - 2 PWM controllers (primary/secondary)
  - 1 IMU for orientation sensing
endlegend

@enduml
