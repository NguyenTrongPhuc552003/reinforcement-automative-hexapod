/'
 * Hexapod Project - A Reinforcement Learning-based Autonomous Hexapod
 * Copyright (C) 2025  Nguyen Trong Phuc
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 '/

@startuml deployment
!theme plain
!define RECTANGLE class

title <font size=20><b>Hexapod Robot - System Deployment Architecture</b></font>
left header Version 1.0 - Reinforcement Learning Autonomous Hexapod
right header BeagleBone Black Platform

skinparam page {
    size A4
    margin 10mm
}

skinparam {
    defaultFontSize 9
    classFontSize 8
    packageFontSize 10
    titleFontSize 12
}

skinparam node {
    BackgroundColor<<hardware>> LightBlue
    BackgroundColor<<kernel>> LightGreen
    BackgroundColor<<userspace>> LightYellow
    BackgroundColor<<sensors>> LightCoral
    BackgroundColor<<actuators>> LightPink
}

' Hardware Layer
node "BeagleBone Black Hardware Platform" <<hardware>> {
    component "TI AM3358 Sitara\nARM Cortex-A8\n1GHz Single-Core\n512MB DDR3 RAM" as processor
    component "4GB eMMC\nStorage" as storage
    component "I2C Bus 2\n(0x40, 0x41, 0x68)" as i2c_bus
    component "GPIO Pins\n(P9_11-P9_42)" as gpio_pins
    component "PWM Subsystem" as pwm_sys
}

' Sensor Hardware
node "Sensor Hardware" <<sensors>> {
    component "MPU6050\n6-axis IMU\nI2C@0x68" as mpu6050_hw
    component "ADXL345\n3-axis Accelerometer\nI2C@0x68" as adxl345_hw
    component "HC-SR04\nUltrasonic Sensor\nGPIO P9_12, P9_15" as ultrasonic_hw
}

' Actuator Hardware
node "Servo Motor Array" <<actuators>> {
    component "PCA9685 #1\nPWM Controller\nI2C@0x40\nChannels 0-10" as pca9685_1
    component "PCA9685 #2\nPWM Controller\nI2C@0x41\nChannels 0-10" as pca9685_2
    component "18x MG996R\nServo Motors\n(3 per leg)" as servos
}

' Kernel Space
node "Linux Kernel Space" <<kernel>> {
    package "Device Drivers" {
        component "hexapod_driver.ko\nMain Controller\nIOCTL Interface" as hexapod_driver
        component "pca9685.o\nPWM Driver\nI2C Communication" as pca9685_driver
        component "mpu6050.o\nIMU Driver\nSensor Data" as mpu6050_driver
        component "adxl345.o\nAccel Driver\nTilt Detection" as adxl345_driver
        component "servo.o\nServo Control\nPosition Management" as servo_driver
    }
    
    component "/dev/hexapod\nDevice Node\nCharacter Device" as device_node
    component "I2C Subsystem\ni2c-dev, i2c-omap" as i2c_subsystem
    component "GPIO Subsystem\ngpio-omap" as gpio_subsystem
}

' User Space Applications
node "User Space Applications" <<userspace>> {
    package "Main Application" {
        component "hexapod_app\nMain Control App\nKeyboard Interface" as main_app
        component "Application Layer\nSignal Handling\nInput Processing" as app_layer
        component "Controller Layer\nMovement Logic\nBalance Control" as controller_layer
    }
    
    package "Test Programs" <<testprograms>> {
        component "test_servo\nServo Testing" as test_servo
        component "test_mpu6050\nIMU Testing" as test_mpu6050
        component "test_adxl345\nAccel Testing" as test_adxl345
        component "test_movement\nGait Testing" as test_movement
        component "test_balance\nBalance Testing" as test_balance
        component "test_calibration\nCalibration Tool" as test_calibration
        component "test_hcsr04\nUltrasonic Testing" as test_hcsr04
    }
    
    package "Core Libraries" {
        component "Hexapod API\nhexapod.hpp/cpp\nHardware Interface" as hexapod_api
        component "Kinematics Engine\nForward/Inverse IK\n3D Calculations" as kinematics
        component "Gait Controller\nTripod/Wave/Ripple\nMovement Patterns" as gait_controller
        component "Calibration Manager\nOffset Management\nFile I/O" as calibration
        component "Ultrasonic Sensor\nDistance Measurement\nObstacle Detection" as ultrasonic_api
        component "Common Utilities\nTerminal/Signal/Performance" as common_utils
    }
}

' Optional Python Layer
node "Python TD3 (Optional)" <<userspace>> {
    component "pytd3\nReinforcement Learning\nTD3 Algorithm" as pytd3
    component "td3bridge.py\nC++ Interface\nReward System" as td3bridge
}

' Connections - Hardware to Kernel
processor <|-- i2c_bus
processor <|-- gpio_pins
processor <|-- pwm_sys
i2c_bus <|-- i2c_subsystem : "I2C Protocol"
gpio_pins <|-- gpio_subsystem : "GPIO Control"

' Sensor Connections
mpu6050_hw <|-- i2c_bus : "I2C@0x68"
adxl345_hw <|-- i2c_bus : "I2C@0x53 (Alt)"
ultrasonic_hw <|-- gpio_pins : "Trigger/Echo"

' Actuator Connections
pca9685_1 <|-- i2c_bus : "I2C@0x40"
pca9685_2 <|-- i2c_bus : "I2C@0x41"
pca9685_1 <|-- servos : "PWM 0-10"
pca9685_2 <|-- servos : "PWM 0-10"

' Kernel Driver Connections
i2c_subsystem <|-- hexapod_driver
hexapod_driver <|-- pca9685_driver
hexapod_driver <|-- mpu6050_driver
hexapod_driver <|-- adxl345_driver
gpio_subsystem <|-- hexapod_driver
hexapod_driver <|-- servo_driver
hexapod_driver <|-- device_node : "Creates"

' User Space to Kernel
hexapod_api --|>  device_node : "IOCTL Calls"
main_app <|-- hexapod_api : "Hardware Control"
test_servo <|-- hexapod_api
test_mpu6050 <|-- hexapod_api
test_adxl345 <|-- hexapod_api
test_movement <|-- hexapod_api
test_balance <|-- hexapod_api
test_calibration <|-- hexapod_api
test_hcsr04 <|-- ultrasonic_api

' Application Layer Dependencies
app_layer <|-- controller_layer
controller_layer <|-- gait_controller
controller_layer <|-- kinematics
controller_layer <|-- calibration
controller_layer <|-- ultrasonic_api
controller_layer <|-- common_utils
main_app <|-- app_layer

' Python Integration (Optional)
pytd3 <|-- td3bridge : "Python Interface"
td3bridge -.-> hexapod_api : "Optional Integration"

' Notes with technical details
note right of processor
  Processing Power:
  - ARM Cortex-A8 @ 1GHz
  - 512MB DDR3 RAM
  - 4GB eMMC Storage
  - Real-time capabilities
end note

note left of servos
  Servo Configuration:
  - 18 total servos (3 per leg)
  - 6 legs × 3 joints each
  - Hip, Knee, Ankle joints
  - MG996R micro servos
  - PWM control @ 50Hz
end note

note bottom of device_node
  IOCTL Commands:
  - HEXAPOD_IOCTL_SET_LEG
  - HEXAPOD_IOCTL_GET_IMU
  - HEXAPOD_IOCTL_CALIBRATE
  - HEXAPOD_IOCTL_CENTER_ALL
  - HEXAPOD_IOCTL_SET_SENSOR_TYPE
end note

note top of gait_controller
  Supported Gaits:
  - Tripod: Fast, stable
  - Wave: Slow, smooth
  - Ripple: Medium speed
  - Adaptive parameters
  - Obstacle avoidance
end note

note bottom of ultrasonic_api
  Features:
  - Distance measurement
  - Obstacle detection
  - Automatic slowdown
  - Collision avoidance
  - Configurable thresholds
end note

legend right
  <b>Hexapod Robot - Deployment Legend</b>
  --
  <b>Hardware Components:</b>
  • BeagleBone Black
  • PCA9685 PWM Controllers
  • MPU6050 IMU Sensor
  • ADXL345 Accelerometer
  • Ultrasonic Sensor
  • Servo Motors

  <b>Software Components:</b>
  • Linux Kernel
  • Device Drivers
  • User Space Applications
  • Python TD3 (Optional)

  <b>Communication Protocols:</b>
  • I2C
  • PWM
  • GPIO
end legend

@enduml